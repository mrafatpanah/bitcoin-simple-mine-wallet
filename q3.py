# -*- coding: utf-8 -*-
"""q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i4YxQ7ahkcIlnZ-RxeKI_kRoZJD-NKHc
"""

#from google.colab import files
#uploaded = files.upload()

#!pip install python-bitcoinlib

import bitcoin.wallet
from bitcoin.core import COIN, b2lx, serialize, x, lx, b2x, Hash
from utils import *
import time,struct

def get_P2PKH_output_script(my_public_key):
    return [OP_DUP, OP_HASH160, Hash160(my_public_key),OP_EQUALVERIFY ,OP_CHECKSIG]

def make_P2PKH_transaction(amount_to_send, txid_to_spend, utxo_index,
        output_script, script_sig):
    txin = create_txin(txid_to_spend, utxo_index)
    txout = create_txout(amount_to_send, output_script)
    txin.scriptSig = script_sig
    tx = CMutableTransaction([txin], [txout])
    return tx

def merkle_root(coinbase_tx):
    coinbase_s = b2x(coinbase_tx.serialize())
    merkle_root = b2lx(coinbase_tx.GetTxid())
    print('body: ', coinbase_s)
    print('merkle root: ', merkle_root)
    return merkle_root,coinbase_s

def partial_header(version, last_block_hash, merkle_root, bits):
    time_now = int(time.time())
    return struct.pack("<L", version) + bytes.fromhex(last_block_hash)[::-1] + bytes.fromhex(merkle_root)[::-1] + struct.pack('<LL', time_now, int(bits, 16))

def get_target():
    exponent = 0x1f
    coefficient = 0x010000
    exponent2 = 8 * ( exponent - 3)
    target = coefficient * (2**exponent2)
    target = format(target, 'x')
    target_byte = bytes.fromhex(str(target).zfill(64))
    print('target: ', str(target).zfill(64)) # if we are smaller than 0x0001,we have 4 leading zeros
    return target_byte

def mine_block(partial_header, target):
    nounce = 0
    while nounce <= 0xFFFFFFFF:
        header = partial_header + struct.pack('<L', nounce)
        block_hash = Hash(header)
        if block_hash[::-1] < target:
            print('Nounce found : ', nounce)
            return header, block_hash
        nounce += 1
    raise BaseException('Cannot find a suitable nounce to mine a block')

if __name__ == '__main__':
    last_block_hash = "00000000162e6210296363f147ab51bffcb993e3d4adf2ff6b94ccd437cd72ea"
    amount_to_send = 6.25
    coinbase_txid_to_spend = (64*'0')
    coinbase_utxo_index = int('0xFFFFFFFF', 16)
    coinbase_hex_data = '810199268MohammadMohammadiRafatpanah'.encode('utf-8').hex()
    print('coinbase hexadecimal data: ', coinbase_hex_data)
    bitcoin.SelectParams('mainnet')
    my_public_key = bitcoin.wallet.CBitcoinSecret('5J3pNGCz4BQsyrwL4ysE41m3MMe1onw9rykPXENNuro1B52tKXV').pub
    print('my address: ',bitcoin.wallet.P2PKHBitcoinAddress.from_pubkey(my_public_key))
    output_script = get_P2PKH_output_script(my_public_key)
    coinbase_script_sig = CScript([int(coinbase_hex_data, 16).to_bytes(len(coinbase_hex_data)//2, 'big')])
    coinbase_tx = make_P2PKH_transaction(amount_to_send, coinbase_txid_to_spend, coinbase_utxo_index,
        output_script, coinbase_script_sig)
    merkle_root,block_body = merkle_root(coinbase_tx)
    target = get_target()
    block_version = 2
    partial_header = partial_header(block_version, last_block_hash, merkle_root, "0x1f010000")
    header, block_hash = mine_block(partial_header, target)
    print('Block with hash ', b2lx(block_hash), ' created!')
    print('Block header: ', b2x(header))
    print('Block body: ', block_body)
# -*- coding: utf-8 -*-
"""q2_1_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n9QXOTjIiLTDIx6wWiMPfFJXILNLJjpj
"""

#from google.colab import files
#uploaded = files.upload()
#!pip install python-bitcoinlib

import bitcoin.wallet
from bitcoin.core import COIN, b2lx, serialize, x, lx, b2x
from utils import *
from bitcoin.core.script import CScript, OP_DUP, OP_HASH160, OP_EQUALVERIFY, OP_CHECKSIG, SignatureHash, SIGHASH_ALL, OP_TRUE, OP_RETURN

bitcoin.SelectParams("testnet")
my_private_key = bitcoin.wallet.CBitcoinSecret("927wr1sF6cctY8phdKiCochQ7tPTPy5eB8zEBTPsx47iM8N9reY") # Private key in WIF format
my_public_key = my_private_key.pub
my_address = bitcoin.wallet.P2PKHBitcoinAddress.from_pubkey(my_public_key)
print(my_address)

def no_ret_P2PKH_scriptPubKey():
    return [OP_RETURN]

def public_P2PKH_scriptPubKey():
    return [OP_CHECKSIG]

def P2PKH_scriptPubKey(address):
    return [OP_DUP, OP_HASH160, address, OP_EQUALVERIFY, OP_CHECKSIG]

def two_dest_create_OP_CHECKSIG_signature(txin, first_txout, second_txout, txin_scriptPubKey, seckey):
    tx = CMutableTransaction([txin], [first_txout, second_txout])
    sighash = SignatureHash(CScript(txin_scriptPubKey), tx,
                            0, SIGHASH_ALL)
    sig = seckey.sign(sighash) + bytes([SIGHASH_ALL])
    return sig

def two_dest_create_signed_transaction(txin, first_txout, second_txout, txin_scriptPubKey,
                              txin_scriptSig):
    tx = CMutableTransaction([txin], [first_txout, second_txout])
    txin.scriptSig = CScript(txin_scriptSig)
    VerifyScript(txin.scriptSig, CScript(txin_scriptPubKey),
                 tx, 0, (SCRIPT_VERIFY_P2SH,))
    return tx

def P2PKH_scriptSig(txin, first_txout, second_txout, txin_scriptPubKey):
    signature = two_dest_create_OP_CHECKSIG_signature(txin, first_txout, second_txout, txin_scriptPubKey, my_private_key)
    return [signature, my_public_key]


def two_dest_send_from_P2PKH_transaction(first_amount_to_send, second_amount_to_send, txid_to_spend, utxo_index,
                                first_txout_scriptPubKey, second_txout_scriptPubKey):
    first_txout = create_txout(first_amount_to_send, first_txout_scriptPubKey)
    second_txout = create_txout(second_amount_to_send, second_txout_scriptPubKey)

    txin_scriptPubKey = P2PKH_scriptPubKey(my_address)
    txin = create_txin(txid_to_spend, utxo_index)
    txin_scriptSig = P2PKH_scriptSig(txin, first_txout, second_txout, txin_scriptPubKey)

    new_tx = two_dest_create_signed_transaction(txin, first_txout, second_txout, txin_scriptPubKey,
                                       txin_scriptSig)

    return broadcast_transaction(new_tx)

if __name__ == '__main__':
    ######################################################################
    first_amount_to_send = 0.0001
    second_amount_to_send = 0.0003
    txid_to_spend = ('f098887074a5f6603ced3f946e1f704213bcbed96e22337cf7a0f422e32c7d7c') 
    utxo_index = 0
    ######################################################################

    print(my_address) 
    print(my_public_key.hex()) 
    print(my_private_key.hex())
    first_txout_scriptPubKey = no_ret_P2PKH_scriptPubKey()
    second_txout_scriptPubKey = public_P2PKH_scriptPubKey()
    response = two_dest_send_from_P2PKH_transaction(first_amount_to_send, second_amount_to_send, txid_to_spend, utxo_index, first_txout_scriptPubKey, second_txout_scriptPubKey)
    print(response.status_code, response.reason)
    print(response.text)